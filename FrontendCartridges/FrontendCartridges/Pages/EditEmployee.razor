@page "/employees/edit/{id:int}"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using FrontendCartridges.Models
@inject HttpClient Http
@inject NavigationManager navigationManager

@if (employee != null)
{
<h3>Edit @(employee.LastName), @(employee.FirstName) @(employee.MiddleName) Employee</h3>

<EditForm EditContext="@editContext" OnValidSubmit="@EditAction">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="LastName" @bind-Value="employee.LastName" placeholder="Last name" />
    <br />
    <InputText id="FirstName" @bind-Value="employee.FirstName" placeholder="First name" />
    <br />
    <InputText id="MiddleName" @bind-Value="employee.MiddleName" placeholder="Middle name" />
    <br />

    <h6>Select Department</h6>
    @if (departments != null)
    {
        <InputSelect id="DepartmentId" @bind-Value="employee.DepartmentId">
            @foreach (var department in departments)
                    {
                <option value="@department.Id">@department.Name</option>
                    }
        </InputSelect>
    }
    <br />

    <Button Type="submit" Name="Save" Width="100" />
    <Button Type="button" Name="Delete" Width="100" OnClick="Delete" HasActive="true"></Button>
    <Button Type="button" Name="Cancel" Width="100" OnClick="Back" HasActive="true"></Button>
</EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private EditContext editContext;
    private IEnumerable<Department> departments;
    private Employee employee;

    protected override async Task OnInitializedAsync()
    {
        employee = await Http.GetFromJsonAsync<Employee>($"https://localhost:44371/api/employees/{Id}");
        editContext = new(employee);
        departments = await Http.GetFromJsonAsync<IEnumerable<Department>>("https://localhost:44371/api/departments");
    }

    private async Task SaveEmployee()
    {
        await Http.PutAsJsonAsync($"https://localhost:44371/api/employees", employee);
    }

    private void Back()
    {
        navigationManager.NavigateTo("https://localhost:44312/employees");
    }

    private async Task EditAction()
    {
        if (editContext != null && editContext.Validate())
        {
            await SaveEmployee();
            Back();
        }
    }

    private void Delete()
    {
        navigationManager.NavigateTo($"https://localhost:44312/employees/delete/{Id}");
    }
}
